"0","# Create a function to assess our models"
"0",""
"0","#create a function to determin avg mape"
"0","mape_fun <- function(y_actual, y_pred){"
"0","  return(mean(abs(y_actual - y_pred) / y_actual))"
"0","}"
"0",""
"0","mod_assessment.fun <- function(training, testing, training_y, testing_y, lmfit, pred){"
"0","  "
"0","    "
"0","  SSE = sum((testing_y -pred)^2)    # sum of squared errors"
"0","  SST = sum((testing_y - mean(training_y))^2) # total sum of squares"
"0","  "
"0","  R_square = 1 - SSE/SST"
"0","  message('R_squared on the test data:')"
"0","  print(round(R_square, 2))"
"0","  "
"0","  RMSE = sqrt(SSE/length(pred))"
"0","  "
"0","  message(""Root mean square error on the test data: "")"
"0","  print(round(RMSE, 2))"
"0","  "
"0","  "
"0","  message(""Mean Absolute Percent Error on the test data (MAPE):"")"
"0","  print(mean(abs(testing_y - pred) / testing_y))"
"0","  "
"0","  #----------"
"0","  # Preparing data for ploting"
"0","  my_data = as.data.frame(cbind(predicted = pred,"
"0","                              observed = testing_y))"
"0","  "
"0","  # Plot predictions vs test data"
"0","  print(ggplot(my_data,aes(predicted, observed)) +"
"0","        geom_point(color = ""darkred"", alpha = 0.5) + "
"0","        geom_smooth(method=lm)+ ggtitle('Linear Regression ') +"
"0","        ggtitle(""Linear Regression: Prediction vs Test Data"") +"
"0","        xlab(""Predicted Median Household Income "") +"
"0","        ylab(""Observed Median Household Income"") +"
"0","        theme(plot.title = element_text(color=""darkgreen"",size=18,hjust = 0.5),"
"0","                       axis.text.y = element_text(size=12),"
"0","            "
"0","              axis.text.x = element_text(size=12,hjust=.5),"
"0","                        axis.title.x = element_text(size=14),"
"0","                        axis.title.y = element_text(size=14)) )"
"0","  "
"0","  # Create a residuals plot"
"0","  "
"0","  y_train_pred = predict(lmfit, training[,names(training) != ""Median_HHIncome""])"
"0","  "
"0","  print(ggplot() + geom_point(aes(y_train_pred, y_train_pred - training_y), colour = I('blue')) +"
"0","    geom_point(aes(pred, pred - testing_y), colour = I('lightgreen')) + xlab(""Predicted Values"") + "
"0","    ylab(""Residuals"") +"
"0","    ggtitle('Predicted Values vs. Residuals - Training & Test Data') )"
"0",""
"0",""
"0","}"
"0",""
